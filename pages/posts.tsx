import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Image from "next/image";
import { Post } from ".prisma/client";
import useSWR from "swr";
import { axiosFetcher } from "../util/axios";
import Link from "next/link";
import { AxiosError } from "axios";
import {
  ArrowNarrowLeftIcon,
  ArrowNarrowRightIcon,
  SearchIcon,
} from "@heroicons/react/solid";

interface PageInfo {
  hasNext: boolean;
  hasPrev: boolean;
  nextPage: number | null;
  prevPage: number | null;
  totalPages: number;
  currentPage: number;
}
interface Data {
  posts: Post[];
  pageInfo: PageInfo;
}
const Posts: NextPage = () => {
  // TOOD NOTES:
  // Pagination Component takes Page Info
  // Filter Component takes setParams callback, params passed to SWR, component manages internal state and callsback via useEffect
  // Posts Component takes Post[]
  // Audit Tailwind Container styles (tiny -> Large)

  const [posts, setPosts] = useState<Post[] | null>(null);
  const [error, setError] = useState<AxiosError | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [page, setPage] = useState<number | null>(1);
  const [limit, setLimit] = useState<number>(5);
  const [search, setSearch] = useState("");
  const [pageInfo, setPageInfo] = useState<PageInfo>({
    hasNext: false,
    hasPrev: false,
    nextPage: null,
    prevPage: null,
    totalPages: 1,
    currentPage: 1,
  });
  const API_URL = "/api/posts";

  const handleOnError = (e: any) => {
    setError(e);
    setLoading(false);
  };

  const handleOnSuccess = (data: Data) => {
    const { posts, pageInfo } = data;
    setPageInfo(pageInfo);
    setPosts(posts);
    setLoading(false);
  };

  useSWR({ url: API_URL, params: { search, page, limit } }, axiosFetcher, {
    onError: handleOnError,
    onSuccess: handleOnSuccess,
  });

  if (loading) return <div>Loading...</div>;
  if (error) return <div>An error occurred.</div>;
  if (!posts) return <div>None Found...</div>;

  const handleNextPage = () => {
    setPage(pageInfo.nextPage);
  };

  const handlePrevPage = () => {
    setPage(pageInfo.prevPage);
  };

  const handleLimitChange = (e: any) => {
    setPage(1);
    setLimit(e.target.value);
  };

  const resetAll = () => {
    setSearch("");
    setPage(1);
    setLimit(5);
  };

  console.log(pageInfo);
  return (
    <>
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>MAIN NAV</header>
      <main className="">
        <h1 className="text-blue-500 text-4xl font-bold text-center">Posts</h1>

        <div className="bg-gray-300 py-4 w-full flex justify-around items-end">
          <div className="w-full mx-2 sm:w-1/4">
            <label
              htmlFor="search"
              className="block text-sm font-medium text-gray-700"
            >
              Search
            </label>
            <input
              id="search"
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full py-2 px-3 sm:text-sm border-gray-300 rounded-md"
              placeholder="Cool Blog Title"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </div>

          <div className="hidden sm:block">
            <label
              htmlFor="limitOptions"
              className="block text-sm font-medium text-gray-700"
            >
              Page Size
            </label>
            <select
              id="limitOptions"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              onChange={handleLimitChange}
              value={limit}
            >
              <option value={1}>1</option>
              <option value={5}>5</option>
              <option value={10}>10</option>
              <option value={25}>25</option>
            </select>
          </div>

          <div className="hidden sm:block">
            <label
              htmlFor="categoryFilter"
              className="block text-sm font-medium text-gray-700"
            >
              Category
            </label>
            <select
              id="categoryFilter"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              // onChange={handleLimitChange}
              // value={limit}
            >
              <option value={1}>TODO</option>
            </select>
          </div>

          <div className="hidden sm:block">
            <label
              htmlFor="tagFilter"
              className="block text-sm font-medium text-gray-700"
            >
              Tab
            </label>
            <select
              id="tagFilter"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              // onChange={handleLimitChange}
              // value={limit}
            >
              <option value={1}>TODO</option>
            </select>
          </div>

          <div className="hidden sm:block">
            <button
              onClick={resetAll}
              className="inline-flex items-center px-6 py-3 border border-gray-300 shadow-sm text-xs font-medium rounded-full text-gray-700 bg-gray-400 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              reset
            </button>
          </div>
        </div>

        <nav className="bg-gray-100 px-4 py-2 flex items-center justify-between sm:px-0">
          <div className="-mt-px w-0 flex-1 flex">
            <button
              onClick={handlePrevPage}
              disabled={!pageInfo.hasPrev}
              className="border-t-2 border-transparent pt-4 pr-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-blue-700 hover:border-blue-300 disabled:hover:border-gray-300 disabled:hover:text-gray-300 disabled:opacity-75 disabled:cursor-not-allowed"
            >
              <ArrowNarrowLeftIcon
                className="mr-3 h-5 w-5 text-gray-400 hover:text-blue-300"
                aria-hidden="true"
              />
              Previous
            </button>
          </div>
          <div className="hidden md:-mt-px md:flex">
            <p className="text-sm text-gray-700">
              Page {pageInfo.currentPage} of {pageInfo.totalPages}
            </p>
          </div>
          <div className="-mt-px w-0 flex-1 flex justify-end">
            <button
              onClick={handleNextPage}
              disabled={!pageInfo.hasNext}
              className="border-t-2 border-transparent pt-4 pl-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-blue-700 hover:border-blue-300 disabled:hover:border-gray-300 disabled:hover:text-gray-300 disabled:opacity-75 disabled:cursor-not-allowed"
            >
              Next
              <ArrowNarrowRightIcon
                className="ml-3 h-5 w-5 text-gray-400 hover:text-blue-300"
                aria-hidden="true"
              />
            </button>
          </div>
        </nav>

        <div className="mt-12 max-w-lg mx-auto grid gap-5 lg:grid-cols-3 lg:max-w-none">
          {posts.map((post) => (
            <div
              key={post.title}
              className="flex flex-col rounded-lg shadow-lg overflow-hidden mx-3"
            >
              <div className="flex-shrink-0">
                <img
                  className="h-48 w-full object-cover"
                  src={post.coverImage}
                  alt=""
                />
              </div>
              <div className="flex-1 bg-white p-6 flex flex-col justify-between">
                <div className="flex-1">
                  <p className="text-sm font-medium text-indigo-600">
                    <a href={"#"} className="hover:underline">
                      "post.category.name"
                    </a>
                  </p>
                  <a href={`/post/${post.id}`} className="block mt-2">
                    <p className="text-xl font-semibold text-gray-900">
                      {post.title}
                    </p>
                    <p className="mt-3 text-base text-gray-500 truncate">
                      {post.description}
                    </p>
                  </a>
                </div>
                <div className="mt-6 flex items-center">
                  <div className="ml-3">
                    <div className="flex space-x-1 text-sm text-gray-500">
                      <p>
                        Published On:{" "}
                        {new Date(post.publishedOn).toLocaleDateString()}
                      </p>
                      {/* <span aria-hidden="true">&middot;</span>
                      <span>3 min read</span> */}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </main>
    </>
  );
};

export default Posts;
