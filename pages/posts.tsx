import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Image from "next/image";
import { Post } from ".prisma/client";
import useSWR from "swr";
import { axiosFetcher } from "../util/axios";
import Link from "next/link";
import { AxiosError } from "axios";

interface PageInfo {
  hasNext: boolean;
  hasPrev: boolean;
  nextPage: number | null;
  prevPage: number | null;
  totalPages: number;
  currentPage: number;
}
interface Data {
  posts: Post[];
  pageInfo: PageInfo;
}
const Posts: NextPage = () => {
  const [posts, setPosts] = useState<Post[] | null>(null);
  const [error, setError] = useState<AxiosError | null>(null);
  const [page, setPage] = useState<number | null>(1);
  const [limit, setLimit] = useState<number>(5);
  const [pageInfo, setPageInfo] = useState<PageInfo>({
    hasNext: false,
    hasPrev: false,
    nextPage: null,
    prevPage: null,
    totalPages: 1,
    currentPage: 1,
  });
  const [loading, setLoading] = useState<boolean>(true);
  const [search, setSearch] = useState("");
  const API_URL = "/api/posts";

  const handleOnError = (e: any) => {
    setError(e);
    setLoading(false);
  };

  const handleOnSuccess = (data: Data) => {
    const { posts, pageInfo } = data;
    setPageInfo(pageInfo);
    setPosts(posts);
    setLoading(false);
  };

  useSWR({ url: API_URL, params: { search, page, limit } }, axiosFetcher, {
    onError: handleOnError,
    onSuccess: handleOnSuccess,
  });

  if (loading) return <div>Loading...</div>;
  if (error) return <div>An error occurred.</div>;
  if (!posts) return <div>None Found...</div>;

  const handleNextPage = () => {
    setPage(pageInfo.nextPage);
  };

  const handlePrevPage = () => {
    setPage(pageInfo.prevPage);
  };

  const handleLimitChange = (e: any) => {
    setPage(1);
    setLimit(e.target.value);
  };

  const resetAll = () => {
    setSearch("");
    setPage(1);
    setLimit(5);
  };

  console.log(pageInfo);
  return (
    <div className="">
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <h1 className="text-blue-500">Posts</h1>
        <input
          placeholder="search"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />

        <label htmlFor="limitOptions">Limit</label>
        <select id="limitOptions" onChange={handleLimitChange} value={limit}>
          <option value={1}>1</option>
          <option value={5}>5</option>
          <option value={10}>10</option>
          <option value={25}>25</option>
        </select>

        <button onClick={resetAll}>reset</button>

        <ul>
          {posts.map((post: Post) => (
            <li key={post.id}>
              <Link href={`/post/${post.id}`} passHref>
                <div>
                  <p>{post.title}</p>
                  <Image
                    src={post.coverImage}
                    alt="post image"
                    loading="eager"
                    priority={true}
                    width={100}
                    height={100}
                    className="w-32 h-32 border-4 border-blue-400 drop-shadow-md"
                  />
                </div>
              </Link>
            </li>
          ))}
        </ul>

        <div>
          <button onClick={handlePrevPage} disabled={!pageInfo.hasPrev}>
            Prev
          </button>
          <p>
            Page {pageInfo.currentPage} of {pageInfo.totalPages}
          </p>
          <button onClick={handleNextPage} disabled={!pageInfo.hasNext}>
            More
          </button>
        </div>
      </main>
    </div>
  );
};

export default Posts;
